import sys
import time
import re
import threading
import os
from subprocess import check_output
from adb_android import adb_android
#runningTime = 20

def tcpDump(app):
	check_output('tcpdump -i en0 icmp -c 1 -w /Users/temp/Downloads/cip/Android-Malware-Detection' + app + '.pcap', shell=True)
	#check_output('tcpdump -i wlan1 icmp -c 10', shell=True)
	return
#
# def getList():
# 	package_list = []
# 	package_list_full = check_output('./adb shell pm list packages', shell=True)
# 	#package_list_full = check_output('./adb shell pm list packages', shell=True).split('\r\n')[:-1]
# 	print package_list_full
# 	f = open('package_list.txt', 'w')
# 	f.write(package_list_full)
#

def startApp(package):
	print "Starting " + package
	try:
		cmd = 'adb shell monkey -p ' + package +' -c android.intent.category.LAUNCHER 1'
		check_output(cmd.split())
		print package + " started"


		cmd2 = 'adb shell monkey -p ' + package +' --throttle 100 -v 1000'
		check_output(cmd2.split())

	except Exception as e: 
		print(e, "40")
		print "launch not correctly"
		
def testApps(package, i ):
	# f = open('package_list.txt', 'r')
	# package_list_raw = f.read()
	# print package_list_raw
	# package_list = package_list_raw.split('\r\n')[:-1]
	#print "Obtaining apps on the device"
	# for package in package_list_full:
	# 	if re.match('package:com\.android\..+', package) or re.match('package:com\.example\..+', package) or re.match('package:android', package) or re.match('package:com\.google\.android.+', package) or re.match('package:com\.qualcomm\..+', package) or re.match('package:com\.samsung\..+', package) or re.match('package:com\.sec\..+', package):
	# 		pass
	# 	else:
	# 		package_list.append(package[8:-1])
	#try:
	#check_output('tcpdump -i wlan0 icmp -w /home/bushido/cip/' + app[8:] + '.pcap', shell=True)
	#sys.stdout.write("[%s]" % (" " * runningTime))
	#sys.stdout.flush()
	#sys.stdout.write("\b" * (runningTime+1))
	#except:
		#print "The tcpdump is not launched correctly"
	time.sleep(1)
	ping_process = os.popen('ping -i 0.1 -c 100 192.168.1.242')
	ping_output = ping_process.read()
	# print ping_output
	path = '/Users/temp/Desktop/output_legit/' + package + "/" + str(i+1) +'.txt'
	if not os.path.exists(os.path.dirname(path)):
	    try:
	        os.makedirs(os.path.dirname(path))
	    except OSError as exc: # Guard against race condition
	    	print("HERE")
	        if exc.errno != errno.EEXIST:
	            raise

	with open(path , 'a') as the_file:
		the_file.write(ping_output)

	time.sleep(1)


	# t = threading.Thread(target=tcpDump, args=(package,))
	# t.start()
	# try:
	# 	#for i in xrange(runningTime):
	# 	#	time.sleep(1)
	# 	while t.isAlive():
	# 		check_output('./adb shell monkey -p ' + package +' -v 5', shell=True)
	# 		#generate 5 random activities every second
	# 		#sys.stdout.write("-")
	# 		#sys.stdout.flush()
	# 	print "\nStopping the app"
	# 	#check_output('ps -ef | grep tcpdump | awk \'{ print \"kill -9 " $2 }\' | sh')
	# 	if len(package) > 15:
	# 		pid_raw = check_output('./adb shell ps ' + package, shell=True)
	# 	else:
	# 		pid_raw = check_output('./adb shell ps ' + package, shell=True)
	# 	pid = re.split('\s+', pid_raw.split('\n')[1])[1]
	# 	check_output('./adb shell kill ' + pid, shell=True)
	# 	time.sleep(5)
	# 	print "The app has been stopped"
	# except:
	# 	print "The app is not running correctly"
#
# def installByADB(apk_list):
# 	counter = 0
# 	for apk in apk_list:
# 		try:
# 			result_raw = check_output('./adb install ' + apk + '', shell=True)
# 			print result_raw
# 			counter += 1
# 		except Exception:
# 			pass
# 	print "Installed " + str(counter) + " apps"
#
def install_app(apk):
	try:
		cmdInstall = 'adb install ' + apk
		result_raw = check_output(cmdInstall.split())
		print(result_raw)
		print("Installed")

	except Exception as e: 
		print(e, "99")
		pass
# def obtainApk():
# 	if len(sys.argv) > 1:
# 		apk_raw = check_output('find ' + sys.argv[1] + ' -type f', shell=True)
# 		#print apk_raw
# 	else:
# 		apk_raw = check_output('find . -type f', shell=True)
# 	apk_list = apk_raw.split('\n')[:-1]
# 	print "The list of apk obtained:\n" + str(apk_list) + "\n"
# 	return apk_list
#
# def installApps():
# 	apk_list = obtainApk()
# 	installByADB(apk_list)
#

def delete_apps(package):
	try:
		cmd = 'adb uninstall ' + package
		result_raw = check_output(cmd.split())

		print(result_raw)
		print("Uninstalled")

	except Exception as e: 
		print(e, "126")
		pass


if __name__ == '__main__':
	print("Starting")
	source = '/Users/temp/Downloads/legit'
	for root, dirs, filenames in os.walk(source):
	    for f in filenames:
			print("\n\n\n\n\n\n################################")

			try:
				print("SAD")
				find_package = "/Users/temp/Library/Android/sdk/build-tools/27.0.3/aapt dump badging" + " " + source + "/" + f
				res = check_output(find_package.split())
				pack = res.split("name=")[1].replace("'","")
				package = pack.split(" v",1)[0]
				paths = '/Users/temp/Desktop/output_legit/' + package
				print(package)
				if os.path.isdir(paths):
					print("Already done. Moving one #############")
				else:
					print("Installing....")
					install_app(source + "/" + f)
					startApp(package)
					for i in range(100):
						testApps(package, i)
					delete_apps(package)

			
			except Exception as e: 
				print(e, "174")
				continue
			print("DELETEs NOW ")
			time.sleep(2)
